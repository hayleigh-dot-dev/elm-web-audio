[{"name":"WebAudio","comment":"\n\n\n# Types\n\n@docs Node, Type, Key\n\n\n# Basic Constructors\n\n@docs node, ref, key\n\n\n# Web Audio Nodes\n\n@docs analyser, audioBufferSource, audioDestination, biquadFilter, channelMerger, channelSplitter, constantSource, convolver, dac, delay, dynamicsCompressor, gain, iirFilter, oscillator, osc, panner, stereoPanner, waveShaper\n\n\n# JSON Encoding\n\nTo turn the json in Web Audio nodes, you need to know what that data looks like. \nHere's a breakdown of how everything is encoded:\n\n**Node:**\n```json\n{\n    \"type\": \"OscillatorNode\",\n    \"properties\": [\n        ...\n    ],\n    \"connections\": [\n        ...\n    ]\n}\n```\n\n**Keyed:**\n```json\n{\n    \"key\": \"myOsc\",\n    \"type\": \"OscillatorNode\",\n    \"properties\": [\n        ...\n    ],\n    \"connections\": [\n        ...\n    ]\n}\n```\n\n**Ref:**\n```json\n{\n    \"key\": \"myOsc\",\n    \"type\": \"RefNode\"\n}\n```\n\nProperties can come in two types, AudioParam and NodeProperty. While the Web\nAudio API doesn't make an official distinction between the two, how they are used \ndiffers. \n\nAudioParams represent parameters that can be updated at either audio rate (a-rate) \nor control rate (k-rate). Other audio nodes can connect to an AudioParam and \nmodulate its value in real time. Examples of AudioParams include frequency, gain, \nand delayTime.\n\n**AudioParam:**\n```json\n{\n    \"type\": \"AudioParam\",\n    \"label\": \"frequency\",\n    \"value\": 440\n}\n```\n\nNodeProperties are any other parameter on an audio node. An example of a NodeProperty \nis an OscillatorNode's \"type\" parameter.\n\n**NodeProperty:**\n```json\n{\n   \"type\": \"NodeProperty\",\n   \"label\": \"type\",\n   \"value\": \"square\" \n}\n```\n\n@docs encode\n\n","unions":[{"name":"Node","comment":" The core building block of any Web Audio signal\ngraph. `Keyed` nodes are just like regular nodes but\nwith an additonal `Key` property. This allows `Ref` nodes\nto reference them elsewhere in the graph!\n","args":[],"cases":[["Node",["WebAudio.Type","List.List WebAudio.Property.Property","List.List WebAudio.Node"]],["Keyed",["WebAudio.Key","WebAudio.Type","List.List WebAudio.Property.Property","List.List WebAudio.Node"]],["Ref",["WebAudio.Key"]]]}],"aliases":[{"name":"Key","comment":" A simple type alias representing unique key used to identify\nnodes. Use `Key`s like you would use the `id` attribute on a HTML\nelement.\n","args":[],"type":"String.String"},{"name":"Type","comment":" A simple type alias representing the type of `Node`. This\ncould be something like \"OscillatorNode\" or \"RefNode\".\n","args":[],"type":"String.String"}],"values":[{"name":"analyser","comment":" See: <https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode>\n\nCommon properties:\n\n    - fftSize\n    - minDecibels\n    - maxDecibels\n    - smoothingTimeConstant\n","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"audioBufferSource","comment":" See: <https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode>\n\nCommon properties:\n\n    - buffer\n    - detune\n    - loop\n    - loopStart\n    - loopEnd\n    - playbackRate\n","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"audioDestination","comment":" See: <https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode>\n","type":"WebAudio.Node"},{"name":"biquadFilter","comment":" See: <https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode>\n\nCommon properties:\n    - frequency\n    - detune\n    - Q\n    - type\n","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"channelMerger","comment":" See: <https://developer.mozilla.org/en-US/docs/Web/API/ChannelMergerNode>\n\n","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"channelSplitter","comment":" See: <https://developer.mozilla.org/en-US/docs/Web/API/ChanneSplliterNode>\n","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"constantSource","comment":" See: <https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode>\n\nCommon properties:\n    - offset\n","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"convolver","comment":" See: <https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode>\n\nCommon properties:\n    - buffer\n    - normalize | normalise\n","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"dac","comment":" An alias for `audioDestination`.\n","type":"WebAudio.Node"},{"name":"delay","comment":" See: <https://developer.mozilla.org/en-US/docs/Web/API/DelayNode>\n\nCommon properties:\n    - delayTime\n","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"dynamicsCompressor","comment":" See: <https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode>\n\nCommon properties:\n    - threshold\n    - knee\n    - ratio\n    - reduction\n    - attack\n    - release\n","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"encode","comment":" Converts a `Node` into a Json value. Use this to send a node through\na port to javascipt, where it can be constructed into a Web Audio node!\n","type":"WebAudio.Node -> Json.Encode.Value"},{"name":"gain","comment":" See: <https://developer.mozilla.org/en-US/docs/Web/API/GainNode>\n\nCommon properties:\n    - gain\n","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"iirFilter","comment":" See: <https://developer.mozilla.org/en-US/docs/Web/API/>\n","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"key","comment":" Use this function to apply a key to a node. In the case\nof already keyed nodes, or ref nodes, this will update the\nkey to the new value.\n\n    a = osc [ Property.freq 440 ] [ dac ]\n    b = keyedGain \"b\" [ Property.gain 0.5 ] [ dac ]\n    c = ref \"b\"\n\n    key a \"myOsc\" -- Give a the key \"myOsc\"\n    key b \"myGain\" -- Rename b's key to \"myGain\"\n    key c \"myOsc\" -- c is now a RefNode to \"myOsc\"\n\n","type":"WebAudio.Key -> WebAudio.Node -> WebAudio.Node"},{"name":"node","comment":" General way to construct Web Audio nodes. This is used\nto create all the helper functions below. You can use this\nfunction to define custom nodes by partially applying just\nthe `type` parameter. This is handy if you're using a\nlibrary like Tone.js and want to use those nodes in Elm.\n\n    omniOscillator : List Property -> List Node -> Node\n    omniOscillator =\n        node \"Tone-OmniOscillatorNode\"\n\n    myOsc =\n        omniOscillator\n            [ Property.freq 440 ]\n            [ dac ]\n\n","type":"WebAudio.Type -> List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"osc","comment":" An alias for `oscillator`.\n","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"oscillator","comment":" See: <https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode>\n\nCommon properties:\n    - frequency\n    - detune\n    - type\n","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"panner","comment":" See: <https://developer.mozilla.org/en-US/docs/Web/API/PannerNode>\n\nCommon properties:\n    - coneInnerAngle\n    - coneOuterAngle\n    - coneOuterGain\n    - distanceModel\n    - maxDistance\n    - orientationX\n    - orientationY\n    - orientationZ\n    - panningModel\n    - positionX\n    - positionY\n    - positionZ\n    - refDistance\n    - rolloffFactor\n","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"ref","comment":" A ref node is used to refer to a keyed node elsewhere in\nthe graph. This is how we connect multiple \"chains\" of nodes\ntogether and represet a graph in a simple list.\n","type":"WebAudio.Key -> WebAudio.Node"},{"name":"stereoPanner","comment":" See: <https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode>\n\nCommon properties:\n    - pan\n","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"waveShaper","comment":" See: <https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode>\n\nCommon properties:\n    - curve\n    - oversample\n","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"}],"binops":[]},{"name":"WebAudio.Keyed","comment":"\n\n\n# Types\n\n@docs Node\n\n\n# Basic constructor\n\n@docs node\n\n\n# Web Audio Nodes\n\n@docs analyser, audioBufferSource, biquadFilter, channelMerger, channelSplitter, constantSource, convolver, delay, dynamicsCompressor, gain, iirFilter, oscillator, osc, stereoPanner, waveShaper\n\n","unions":[],"aliases":[{"name":"Node","comment":" ","args":[],"type":"WebAudio.Node"}],"values":[{"name":"analyser","comment":" \n","type":"String.String -> List.List WebAudio.Property.Property -> List.List WebAudio.Keyed.Node -> WebAudio.Keyed.Node"},{"name":"audioBufferSource","comment":" \n","type":"String.String -> List.List WebAudio.Property.Property -> List.List WebAudio.Keyed.Node -> WebAudio.Keyed.Node"},{"name":"biquadFilter","comment":" \n","type":"String.String -> List.List WebAudio.Property.Property -> List.List WebAudio.Keyed.Node -> WebAudio.Keyed.Node"},{"name":"channelMerger","comment":" \n","type":"String.String -> List.List WebAudio.Property.Property -> List.List WebAudio.Keyed.Node -> WebAudio.Keyed.Node"},{"name":"channelSplitter","comment":" \n","type":"String.String -> List.List WebAudio.Property.Property -> List.List WebAudio.Keyed.Node -> WebAudio.Keyed.Node"},{"name":"constantSource","comment":" \n","type":"String.String -> List.List WebAudio.Property.Property -> List.List WebAudio.Keyed.Node -> WebAudio.Keyed.Node"},{"name":"convolver","comment":" \n","type":"String.String -> List.List WebAudio.Property.Property -> List.List WebAudio.Keyed.Node -> WebAudio.Keyed.Node"},{"name":"delay","comment":" \n","type":"String.String -> List.List WebAudio.Property.Property -> List.List WebAudio.Keyed.Node -> WebAudio.Keyed.Node"},{"name":"dynamicsCompressor","comment":" \n","type":"String.String -> List.List WebAudio.Property.Property -> List.List WebAudio.Keyed.Node -> WebAudio.Keyed.Node"},{"name":"gain","comment":" \n","type":"String.String -> List.List WebAudio.Property.Property -> List.List WebAudio.Keyed.Node -> WebAudio.Keyed.Node"},{"name":"iirFilter","comment":" \n","type":"String.String -> List.List WebAudio.Property.Property -> List.List WebAudio.Keyed.Node -> WebAudio.Keyed.Node"},{"name":"node","comment":" A keyed node is useful when we want to create more than\njust simple chains of nodes. If we want to connect two\noscillators to the same gain node, for example, we can\nkey the gain node and use a `ref` node (below) to reference\nit:\n\n    graph : List Node\n    graph =\n        [ keyedGain \"myGain\"\n            [ Property.gain 0.5 ]\n            [ dac ]\n        , osc [ Property.freq 440 ]\n            [ ref \"myGain\" ]\n        , osc [ Property.freq 880 ]\n            [ ref \"myGain\" ]\n        ]\n\n","type":"WebAudio.Key -> WebAudio.Type -> List.List WebAudio.Property.Property -> List.List WebAudio.Keyed.Node -> WebAudio.Keyed.Node"},{"name":"osc","comment":" \n","type":"String.String -> List.List WebAudio.Property.Property -> List.List WebAudio.Keyed.Node -> WebAudio.Keyed.Node"},{"name":"oscillator","comment":" \n","type":"String.String -> List.List WebAudio.Property.Property -> List.List WebAudio.Keyed.Node -> WebAudio.Keyed.Node"},{"name":"stereoPanner","comment":" \n","type":"String.String -> List.List WebAudio.Property.Property -> List.List WebAudio.Keyed.Node -> WebAudio.Keyed.Node"},{"name":"waveShaper","comment":" \n","type":"String.String -> List.List WebAudio.Property.Property -> List.List WebAudio.Keyed.Node -> WebAudio.Keyed.Node"}],"binops":[]},{"name":"WebAudio.Property","comment":"\n\n\n# Types\n\n@docs Property\n\n@docs Type, Label, Value\n\n\n# Basic Constructors\n\n@docs property, audioParam, nodeProperty\n\n\n# Common Properties\n\n@docs attack, buffer, coneInnerAngle, coneOuterAngle, coneOuterGain, curve, delayTime, detune, distanceModel, fftSize, frequency, freq, gain, knee, loop, loopEnd, loopStart, maxChannelCount, maxDecibels, minDecibels, normalize, normalise, offset, orientationX, orientationY, orientationZ, oversample, pan, panningModel, playbackRate, positionX, positionY, positionZ, q, ratio, reduction, refDistance, release, rolloffFactor, smoothingTimeConstant, threshold, type_\n\n\n# JSON Encoding\n\n@docs encode\n\n","unions":[{"name":"Property","comment":" ","args":[],"cases":[]},{"name":"Type","comment":" See [here](https://developer.mozilla.org/en-US/docs/Web/API/AudioParam) for \na description on what an AudioParam is. A NodeProperty is simply anything that is \nnot an AudioParam.\n","args":[],"cases":[["AudioParam",[]],["NodeProperty",[]]]},{"name":"Value","comment":" Properties can hold a variety of values. We use this union type to wrap over \nelm's native types. Typically you won't need to use this type directly (all of the \nhelper functions below take native elm types and do the conversion for you), but \nif you are defining custom properties then you'll need to handle Values yourself. \n","args":[],"cases":[["BValue",["Basics.Bool"]],["FValue",["Basics.Float"]],["FValueList",["List.List Basics.Float"]],["IValue",["Basics.Int"]],["SValue",["String.String"]]]}],"aliases":[{"name":"Label","comment":" ","args":[],"type":"String.String"}],"values":[{"name":"attack","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"audioParam","comment":" ","type":"WebAudio.Property.Label -> WebAudio.Property.Value -> WebAudio.Property.Property"},{"name":"buffer","comment":" ","type":"List.List Basics.Float -> WebAudio.Property.Property"},{"name":"coneInnerAngle","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"coneOuterAngle","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"coneOuterGain","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"curve","comment":" ","type":"List.List Basics.Float -> WebAudio.Property.Property"},{"name":"delayTime","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"detune","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"distanceModel","comment":" ","type":"String.String -> WebAudio.Property.Property"},{"name":"encode","comment":" ","type":"WebAudio.Property.Property -> Json.Encode.Value"},{"name":"fftSize","comment":" ","type":"Basics.Int -> WebAudio.Property.Property"},{"name":"freq","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"frequency","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"gain","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"knee","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"loop","comment":" ","type":"Basics.Bool -> WebAudio.Property.Property"},{"name":"loopEnd","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"loopStart","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"maxChannelCount","comment":" ","type":"Basics.Int -> WebAudio.Property.Property"},{"name":"maxDecibels","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"minDecibels","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"nodeProperty","comment":" ","type":"WebAudio.Property.Label -> WebAudio.Property.Value -> WebAudio.Property.Property"},{"name":"normalise","comment":" ","type":"Basics.Bool -> WebAudio.Property.Property"},{"name":"normalize","comment":" ","type":"Basics.Bool -> WebAudio.Property.Property"},{"name":"offset","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"orientationX","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"orientationY","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"orientationZ","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"oversample","comment":" ","type":"String.String -> WebAudio.Property.Property"},{"name":"pan","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"panningModel","comment":" ","type":"String.String -> WebAudio.Property.Property"},{"name":"playbackRate","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"positionX","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"positionY","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"positionZ","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"property","comment":" ","type":"WebAudio.Property.Type -> WebAudio.Property.Label -> WebAudio.Property.Value -> WebAudio.Property.Property"},{"name":"q","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"ratio","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"reduction","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"refDistance","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"release","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"rolloffFactor","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"smoothingTimeConstant","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"threshold","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"type_","comment":" ","type":"String.String -> WebAudio.Property.Property"}],"binops":[]}]