[{"name":"WebAudio","comment":" WebAudio\n\n\n# WebAudio\n\n@docs Node\n\n@docs Type, Key\n\n@docs node, keyed, ref, key\n\n@docs analyser, audioBufferSource, audioDestination, biquadFilter, channelMerger, channelSplitter, constantSource, convolver, dac, delay, dynamicsCompressor, gain, iirFilter, oscillator, osc, stereoPanner, waveShaper\n\n@docs encode\n\n","unions":[{"name":"Node","comment":" The core building block of any Web Audio signal\ngraph. `Keyed` nodes are just like regular nodes but\nwith an additonal `Key` property. This allows `Ref` nodes\nto reference them elsewhere in the graph!\n","args":[],"cases":[["Node",["WebAudio.Type","List.List WebAudio.Property.Property","List.List WebAudio.Node"]],["Keyed",["WebAudio.Key","WebAudio.Type","List.List WebAudio.Property.Property","List.List WebAudio.Node"]],["Ref",["WebAudio.Key"]]]}],"aliases":[{"name":"Key","comment":" A simple type alias representing unique key used to identify\nnodes. Use `Key`s like you would use the `id` attribute on a HTML\nelement.\n","args":[],"type":"String.String"},{"name":"Type","comment":" A simple type alias representing the type of `Node`. This\ncould be something like \"OscillatorNode\" or \"RefNode\".\n","args":[],"type":"String.String"}],"values":[{"name":"analyser","comment":" ","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"audioBufferSource","comment":" ","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"audioDestination","comment":" ","type":"WebAudio.Node"},{"name":"biquadFilter","comment":" ","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"channelMerger","comment":" ","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"channelSplitter","comment":" ","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"constantSource","comment":" ","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"convolver","comment":" ","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"dac","comment":" ","type":"WebAudio.Node"},{"name":"delay","comment":" ","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"dynamicsCompressor","comment":" ","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"encode","comment":" ","type":"WebAudio.Node -> Json.Encode.Value"},{"name":"gain","comment":" ","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"iirFilter","comment":" ","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"key","comment":" Use this function to apply a key to a node. In the case\nof already keyed nodes, or ref nodes, this will update the\nkey to the new value.\n\n    a = osc [ Property.freq 440 ] [ dac ]\n\n    b = keyedGain \"b\" [ Property.gain 0.5 ] [ dac ]\n\n    c = ref \"b\"\n\n    key a \"myOsc\" -- Give a the key \"myOsc\"\n\n    key b \"myGain\" -- Rename b's key to \"myGain\"\n\n    key c \"myOsc\" -- c is now a RefNode to \"myOsc\"\n\n","type":"WebAudio.Key -> WebAudio.Node -> WebAudio.Node"},{"name":"keyed","comment":" A keyed node is useful when we want to create more than\njust simple chains of nodes. If we want to connect two\noscillators to the same gain node, for example, we can\nkey the gain node and use a `ref` node (below) to reference\nit:\n\n    graph : List Node\n    graph =\n        [ keyedGain \"myGain\"\n            [ Property.gain 0.5 ]\n            [ dac ]\n        , osc [ Property.freq 440 ]\n            [ ref \"myGain\" ]\n        , osc [ Property.freq 880 ]\n            [ ref \"myGain\" ]\n        ]\n\n","type":"WebAudio.Key -> WebAudio.Type -> List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"node","comment":" General way to construct Web Audio nodes. This is used\nto create all the helper functions below. You can use this\nfunction to define custom nodes by partially applying just\nthe `type` parameter. This is handy if you're using a\nlibrary like Tone.js and want to use those nodes in Elm.\n\n    omniOscillator : List Property -> List Node -> Node\n    omniOscillator =\n        node \"Tone-OmniOscillatorNode\"\n\n    myOsc =\n        omniOscillator\n            [ Property.freq 440 ]\n            [ dac ]\n\n","type":"WebAudio.Type -> List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"osc","comment":" ","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"oscillator","comment":" ","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"ref","comment":" A ref node is used to refer to a keyed node elsewhere in\nthe graph. This is how we connect multiple \"chains\" of nodes\ntogether and represet a graph in a simple list.\n","type":"WebAudio.Key -> WebAudio.Node"},{"name":"stereoPanner","comment":" ","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"},{"name":"waveShaper","comment":" ","type":"List.List WebAudio.Property.Property -> List.List WebAudio.Node -> WebAudio.Node"}],"binops":[]},{"name":"WebAudio.Property","comment":" ebAudio.Property\n\n\n# WebAudio.Property\n\n@docs Property, Type, Label, Value\n\n@docs property, audioParam, nodeProperty\n\n@docs attack, coneInnerAngle, coneOuterAngle, coneOuterGain, curve, delayTime, detune, distanceModel, fftSize, frequency, freq, gain, knee, loop, loopEnd, loopStart, maxChannelCount, maxDecibels, minDecibels, normalize, normalise, offset, orientationX, orientationY, orientationZ, oversample, pan, panningModel, playbackRate, positionX, positionY, positionZ, q, ratio, reduction, refDistance, release, rolloffFactor, smoothingTimeConstant, threshold, type_\n\n@docs encode, encodeType, encodeValue\n\n","unions":[{"name":"Property","comment":" ","args":[],"cases":[["Property",["WebAudio.Property.Type","WebAudio.Property.Label","WebAudio.Property.Value"]]]},{"name":"Type","comment":" ","args":[],"cases":[["AudioParam",[]],["NodeProperty",[]]]},{"name":"Value","comment":" ","args":[],"cases":[["BValue",["Basics.Bool"]],["FValue",["Basics.Float"]],["FValueList",["List.List Basics.Float"]],["IValue",["Basics.Int"]],["SValue",["String.String"]]]}],"aliases":[{"name":"Label","comment":" ","args":[],"type":"String.String"}],"values":[{"name":"attack","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"audioParam","comment":" ","type":"WebAudio.Property.Label -> WebAudio.Property.Value -> WebAudio.Property.Property"},{"name":"coneInnerAngle","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"coneOuterAngle","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"coneOuterGain","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"curve","comment":" ","type":"List.List Basics.Float -> WebAudio.Property.Property"},{"name":"delayTime","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"detune","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"distanceModel","comment":" ","type":"String.String -> WebAudio.Property.Property"},{"name":"encode","comment":" ","type":"WebAudio.Property.Property -> Json.Encode.Value"},{"name":"encodeType","comment":" ","type":"WebAudio.Property.Type -> Json.Encode.Value"},{"name":"encodeValue","comment":" ","type":"WebAudio.Property.Value -> Json.Encode.Value"},{"name":"fftSize","comment":" ","type":"Basics.Int -> WebAudio.Property.Property"},{"name":"freq","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"frequency","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"gain","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"knee","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"loop","comment":" ","type":"Basics.Bool -> WebAudio.Property.Property"},{"name":"loopEnd","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"loopStart","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"maxChannelCount","comment":" ","type":"Basics.Int -> WebAudio.Property.Property"},{"name":"maxDecibels","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"minDecibels","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"nodeProperty","comment":" ","type":"WebAudio.Property.Label -> WebAudio.Property.Value -> WebAudio.Property.Property"},{"name":"normalise","comment":" ","type":"Basics.Bool -> WebAudio.Property.Property"},{"name":"normalize","comment":" ","type":"Basics.Bool -> WebAudio.Property.Property"},{"name":"offset","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"orientationX","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"orientationY","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"orientationZ","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"oversample","comment":" ","type":"String.String -> WebAudio.Property.Property"},{"name":"pan","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"panningModel","comment":" ","type":"String.String -> WebAudio.Property.Property"},{"name":"playbackRate","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"positionX","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"positionY","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"positionZ","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"property","comment":" ","type":"WebAudio.Property.Type -> WebAudio.Property.Label -> WebAudio.Property.Value -> WebAudio.Property.Property"},{"name":"q","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"ratio","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"reduction","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"refDistance","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"release","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"rolloffFactor","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"smoothingTimeConstant","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"threshold","comment":" ","type":"Basics.Float -> WebAudio.Property.Property"},{"name":"type_","comment":" ","type":"String.String -> WebAudio.Property.Property"}],"binops":[]}]